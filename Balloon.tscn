[gd_scene load_steps=9 format=3 uid="uid://cqxr8hcupd3c2"]

[ext_resource type="PackedScene" uid="uid://ckvgyvclnwggo" path="res://addons/dialogue_manager/dialogue_label.tscn" id="2_a8ve6"]
[ext_resource type="Script" uid="uid://bb52rsfwhkxbn" path="res://addons/dialogue_manager/dialogue_responses_menu.gd" id="3_72ixx"]

[sub_resource type="CSharpScript" id="CSharpScript_rpx6m"]
script/source = "using Godot;
using Godot.Collections;

namespace DialogueManagerRuntime
{
  public partial class DialogueBalloon : CanvasLayer
  {
	[Export] public string NextAction = \"ui_accept\";
	[Export] public string SkipAction = \"ui_cancel\";


	Control balloon;
	RichTextLabel characterLabel;
	RichTextLabel dialogueLabel;
	VBoxContainer responsesMenu;

	Resource resource;
	Array<Variant> temporaryGameStates = new Array<Variant>();
	bool isWaitingForInput = false;
	bool willHideBalloon = false;

	DialogueLine dialogueLine;
	DialogueLine DialogueLine
	{
	  get => dialogueLine;
	  set
	  {
		if (value == null)
		{
		  QueueFree();
		  return;
		}

		dialogueLine = value;
		ApplyDialogueLine();
	  }
	}

	Timer MutationCooldown = new Timer();


	public override void _Ready()
	{
	  balloon = GetNode<Control>(\"%Balloon\");
	  characterLabel = GetNode<RichTextLabel>(\"%CharacterLabel\");
	  dialogueLabel = GetNode<RichTextLabel>(\"%DialogueLabel\");
	  responsesMenu = GetNode<VBoxContainer>(\"%ResponsesMenu\");

	  balloon.Hide();

	  balloon.GuiInput += (@event) =>
	  {
		if ((bool)dialogueLabel.Get(\"is_typing\"))
		{
		  bool mouseWasClicked = @event is InputEventMouseButton && (@event as InputEventMouseButton).ButtonIndex == MouseButton.Left && @event.IsPressed();
		  bool skipButtonWasPressed = @event.IsActionPressed(SkipAction);
		  if (mouseWasClicked || skipButtonWasPressed)
		  {
			GetViewport().SetInputAsHandled();
			dialogueLabel.Call(\"skip_typing\");
			return;
		  }
		}

		if (!isWaitingForInput) return;
		if (dialogueLine.Responses.Count > 0) return;

		GetViewport().SetInputAsHandled();

		if (@event is InputEventMouseButton && @event.IsPressed() && (@event as InputEventMouseButton).ButtonIndex == MouseButton.Left)
		{
		  Next(dialogueLine.NextId);
		}
		else if (@event.IsActionPressed(NextAction) && GetViewport().GuiGetFocusOwner() == balloon)
		{
		  Next(dialogueLine.NextId);
		}
	  };

	  if (string.IsNullOrEmpty((string)responsesMenu.Get(\"next_action\")))
	  {
		responsesMenu.Set(\"next_action\", NextAction);
	  }
	  responsesMenu.Connect(\"response_selected\", Callable.From((DialogueResponse response) =>
	  {
		Next(response.NextId);
	  }));


	  // Hide the balloon when a mutation is running
	  MutationCooldown.Timeout += () =>
	  {
		if (willHideBalloon)
		{
		  willHideBalloon = false;
		  balloon.Hide();
		}
	  };
	  AddChild(MutationCooldown);

	  DialogueManager.Mutated += OnMutated;
	}


	public override void _ExitTree()
	{
	  DialogueManager.Mutated -= OnMutated;
	}


	public override void _UnhandledInput(InputEvent @event)
	{
	  // Only the balloon is allowed to handle input while it's showing
	  GetViewport().SetInputAsHandled();
	}


	public override async void _Notification(int what)
	{
	  // Detect a change of locale and update the current dialogue line to show the new language
	  if (what == NotificationTranslationChanged && IsInstanceValid(dialogueLabel))
	  {
		float visibleRatio = dialogueLabel.VisibleRatio;
		DialogueLine = await DialogueManager.GetNextDialogueLine(resource, DialogueLine.Id, temporaryGameStates);
		if (visibleRatio < 1.0f)
		{
		  dialogueLabel.Call(\"skip_typing\");
		}
	  }
	}


	public async void Start(Resource dialogueResource, string title, Array<Variant> extraGameStates = null)
	{
	  temporaryGameStates = new Array<Variant> { this } + (extraGameStates ?? new Array<Variant>());
	  isWaitingForInput = false;
	  resource = dialogueResource;

	  DialogueLine = await DialogueManager.GetNextDialogueLine(resource, title, temporaryGameStates);
	}


	public async void Next(string nextId)
	{
	  DialogueLine = await DialogueManager.GetNextDialogueLine(resource, nextId, temporaryGameStates);
	}


	#region Helpers


	private async void ApplyDialogueLine()
	{
	  MutationCooldown.Stop();

	  isWaitingForInput = false;
	  balloon.FocusMode = Control.FocusModeEnum.All;
	  balloon.GrabFocus();

	  // Set up the character name
	  characterLabel.Visible = !string.IsNullOrEmpty(dialogueLine.Character);
	  characterLabel.Text = Tr(dialogueLine.Character, \"dialogue\");

	  // Set up the dialogue
	  dialogueLabel.Hide();
	  dialogueLabel.Set(\"dialogue_line\", dialogueLine);

	  // Set up the responses
	  responsesMenu.Hide();
	  responsesMenu.Set(\"responses\", dialogueLine.Responses);

	  // Type out the text
	  balloon.Show();
	  willHideBalloon = false;
	  dialogueLabel.Show();
	  if (!string.IsNullOrEmpty(dialogueLine.Text))
	  {
		dialogueLabel.Call(\"type_out\");
		await ToSignal(dialogueLabel, \"finished_typing\");
	  }

	  // Wait for input
	  if (dialogueLine.Responses.Count > 0)
	  {
		balloon.FocusMode = Control.FocusModeEnum.None;
		responsesMenu.Show();
	  }
	  else if (!string.IsNullOrEmpty(dialogueLine.Time))
	  {
		float time = 0f;
		if (!float.TryParse(dialogueLine.Time, out time))
		{
		  time = dialogueLine.Text.Length * 0.02f;
		}
		await ToSignal(GetTree().CreateTimer(time), \"timeout\");
		Next(dialogueLine.NextId);
	  }
	  else
	  {
		isWaitingForInput = true;
		balloon.FocusMode = Control.FocusModeEnum.All;
		balloon.GrabFocus();
	  }
	}


	#endregion


	#region signals


	private void OnMutated(Dictionary _mutation)
	{
	  isWaitingForInput = false;
	  willHideBalloon = true;
	  MutationCooldown.Start(0.1f);
	}


	#endregion
  }
}
"

[sub_resource type="StyleBoxFlat" id="StyleBoxFlat_spyqn"]
bg_color = Color(0, 0, 0, 1)
border_width_left = 3
border_width_top = 3
border_width_right = 3
border_width_bottom = 3
border_color = Color(0.329412, 0.329412, 0.329412, 1)
corner_radius_top_left = 5
corner_radius_top_right = 5
corner_radius_bottom_right = 5
corner_radius_bottom_left = 5

[sub_resource type="StyleBoxFlat" id="StyleBoxFlat_ri4m3"]
bg_color = Color(0.121569, 0.121569, 0.121569, 1)
border_width_left = 3
border_width_top = 3
border_width_right = 3
border_width_bottom = 3
border_color = Color(1, 1, 1, 1)
corner_radius_top_left = 5
corner_radius_top_right = 5
corner_radius_bottom_right = 5
corner_radius_bottom_left = 5

[sub_resource type="StyleBoxFlat" id="StyleBoxFlat_e0njw"]
bg_color = Color(0, 0, 0, 1)
border_width_left = 3
border_width_top = 3
border_width_right = 3
border_width_bottom = 3
border_color = Color(0.6, 0.6, 0.6, 1)
corner_radius_top_left = 5
corner_radius_top_right = 5
corner_radius_bottom_right = 5
corner_radius_bottom_left = 5

[sub_resource type="StyleBoxFlat" id="StyleBoxFlat_qkmqt"]
bg_color = Color(0, 0, 0, 1)
border_width_left = 3
border_width_top = 3
border_width_right = 3
border_width_bottom = 3
corner_radius_top_left = 5
corner_radius_top_right = 5
corner_radius_bottom_right = 5
corner_radius_bottom_left = 5

[sub_resource type="Theme" id="Theme_qq3yp"]
default_font_size = 20
Button/styles/disabled = SubResource("StyleBoxFlat_spyqn")
Button/styles/focus = SubResource("StyleBoxFlat_ri4m3")
Button/styles/hover = SubResource("StyleBoxFlat_e0njw")
Button/styles/normal = SubResource("StyleBoxFlat_e0njw")
MarginContainer/constants/margin_bottom = 15
MarginContainer/constants/margin_left = 30
MarginContainer/constants/margin_right = 30
MarginContainer/constants/margin_top = 15
PanelContainer/styles/panel = SubResource("StyleBoxFlat_qkmqt")

[node name="ExampleBalloon" type="CanvasLayer"]
layer = 100
script = SubResource("CSharpScript_rpx6m")
NextAction = null
SkipAction = null

[node name="Balloon" type="Control" parent="."]
unique_name_in_owner = true
layout_mode = 3
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
theme = SubResource("Theme_qq3yp")

[node name="MarginContainer" type="MarginContainer" parent="Balloon"]
layout_mode = 1
anchors_preset = 12
anchor_top = 1.0
anchor_right = 1.0
anchor_bottom = 1.0
offset_top = -219.0
grow_horizontal = 2
grow_vertical = 0

[node name="PanelContainer" type="PanelContainer" parent="Balloon/MarginContainer"]
clip_children = 2
layout_mode = 2
mouse_filter = 1

[node name="MarginContainer" type="MarginContainer" parent="Balloon/MarginContainer/PanelContainer"]
layout_mode = 2

[node name="VBoxContainer" type="VBoxContainer" parent="Balloon/MarginContainer/PanelContainer/MarginContainer"]
layout_mode = 2

[node name="CharacterLabel" type="RichTextLabel" parent="Balloon/MarginContainer/PanelContainer/MarginContainer/VBoxContainer"]
unique_name_in_owner = true
modulate = Color(1, 1, 1, 0.501961)
layout_mode = 2
mouse_filter = 1
bbcode_enabled = true
text = "Character"
fit_content = true
scroll_active = false

[node name="DialogueLabel" parent="Balloon/MarginContainer/PanelContainer/MarginContainer/VBoxContainer" instance=ExtResource("2_a8ve6")]
unique_name_in_owner = true
layout_mode = 2
size_flags_vertical = 3
text = "Dialogue..."

[node name="ResponsesMenu" type="VBoxContainer" parent="Balloon" node_paths=PackedStringArray("response_template")]
unique_name_in_owner = true
layout_mode = 1
anchors_preset = 8
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
offset_left = -290.5
offset_top = -35.0
offset_right = 290.5
offset_bottom = 35.0
grow_horizontal = 2
grow_vertical = 2
size_flags_vertical = 8
theme_override_constants/separation = 2
alignment = 1
script = ExtResource("3_72ixx")
response_template = NodePath("ResponseExample")

[node name="ResponseExample" type="Button" parent="Balloon/ResponsesMenu"]
layout_mode = 2
text = "Response example"

[connection signal="gui_input" from="Balloon" to="." method="_on_balloon_gui_input"]
[connection signal="response_selected" from="Balloon/ResponsesMenu" to="." method="_on_responses_menu_response_selected"]
